package internals;

import java.util.List;
import java.util.Random;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;

import com.google.common.collect.Maps;
import dto.ServiceDTO;
import http.HttpRequest;
import spi.Transaction;

public class ConfigLongPollService {
    private final AtomicBoolean m_longPollingStopped;
    private final AtomicBoolean m_longPollStarted;
    private final ExecutorService m_longPollingService;
    private ConfigServiceLocator m_serviceLocator;
//    private final ConcurrentMap<String, Long> m_notifications;

    public ConfigLongPollService() {
        m_longPollingStopped = new AtomicBoolean(false);
        m_longPollStarted = new AtomicBoolean(true);
        m_longPollingService = Executors.newSingleThreadExecutor();
//         m_notifications = Maps.newConcurrentMap();
    }

    public void submit(String namespace) {
//        m_notifications.putIfAbsent(namespace, INIT_NOTIFICATION_ID);
        if (!m_longPollStarted.get()) {
            startLongPolling();
        }
    }

    private void startLongPolling() {
        if (!m_longPollStarted.compareAndSet(false, true)) {
            //already started
            return;
        }
        try {
            final String id = "";
            final long longPollingInitialDelayInMills = 0;//set TODO: set delay;
            m_longPollingService.submit(new Runnable() {
                public void run() {
                    if (longPollingInitialDelayInMills > 0) {
                        try {
                            TimeUnit.MILLISECONDS.sleep(longPollingInitialDelayInMills);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                    doLongPollingRefresh();
                }
            });
        } catch (Throwable ex) {
            m_longPollStarted.set(false);
        }
    }

    private void doLongPollingRefresh() {
        final Random random = new Random();
        ServiceDTO lastServiceDto = null;
        while (!m_longPollingStopped.get() && !Thread.currentThread().isInterrupted()) {
            try {
                TimeUnit.SECONDS.sleep(5);
            } catch (InterruptedException e) {
            }
            String url = null;
            try {
                if (lastServiceDto == null) {
                    List<ServiceDTO> msgService = getConfigServices();
                    lastServiceDto = msgService.get(random.nextInt(msgService.size()));
                }

                url =
                        assembleLongPollRefreshUrl(lastServiceDto.getHomepageUrl());
                HttpRequest request = new HttpRequest(url);
                request.setReadTimeout(30);

            }catch (Throwable ex){

            }
        }
    }

    private String assembleLongPollRefreshUrl(String homepageUrl) {


        return null;
    }


    public List<ServiceDTO> getConfigServices() {
        List<ServiceDTO> services = m_serviceLocator.getConfigServices();
        if (services.size() == 0) {
        }
        return services;
    }
}